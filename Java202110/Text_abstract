추상 클래스(Abstract Class)


- 객체를 생성할 수 없는 클래스 = 미완성 클래스
  => new 연산자를 통해 생성자 호출 불가능 (생성자에 private 선언과 문법적으로는 동일)
- 상속 전용의 클래스로 사용되어질 수 있음
  => 상속을 통해 서브클래스에서 추상메서드를 오버라이딩 한 후
       업캐스팅을 통한 다형성 활용 가능 ( 추상메서드 구현의 강제를 통해 코드의 통일성 향상)
- 상속받은 서브클래스에서는 추상메서드가 존재할 경우 반드시 오버라이딩 필수
- 추상 클래스는 추상메서드 뿐만 아니라 일반 메서드, 멤버변수, 생성자 모두 가질 수 있다
- 추상메서드를 갖는 클래스는 반드시 추상 클래스로 선언되어야 하지만
  추상클래스라고 해서 모두 추상메서드를 갖는 것은 아니다
- 만약, 추상클래스를 상속받은 서브클래스에서 추상메서드를 오버라이딩 하지 않으려면
  해당 서브클래스를 추상클래스로 선언해야한다.
  => 결국, 더 하위의 서브클래스를 정의하여 최종적으로 추상메서드 오버라이딩이 되야
       인스턴스를 생성하여 정상적인 사용이 가능해짐

< 추상클래스 정의 기본 문법 >
abstract class 클래스명 {
멤버변수, 생성자, 메서드(일반, 추상) 생성 가능
} 

- 추상클래스는 인스턴스 생성이 불가능
- 참조변수로써의 활용은 가능하므로 업캐스팅을 통한 다형성 활용 가능

==================================================================================

추상 메서드(Abstract Method)


- 메서드 구현부(= 바디{})가 없는 메서드 = 미완성 메서드
- 메서드의 동작을 기술하는 구현부가 없는 추상메서드는 실행 가능한 코드 블럭이
  아예 존재하지 않으므로 외부로부터 호출되면 안됨
  => 따라서, 추상 메서드를 갖는 클래스는 인스턴스 생성이 불가능한
       추상클래스로 선언되어야한다.
- 메서드 정의시 선언부의 접근제한자 뒤에 abstract 키워드를 붙여서 정의
  => abstract 키워드가 붙은 메서드는 추상메서드이므로 메서드 바디{}를 가질 수 없다!
       (대신, 메서드 선언부 마지막에 세미콜론(;) 으로 끝냄)
- 서브클래스에서 반드시 오버라이딩 하도록 강제성을 부여해야하는 메서드는
  슈펴클래스에서 추상메서드로 선언 시 서브클래스에서 무조건 오버라이딩 해야한다!
  => 강제성을 통해 업캐스팅시 코드의 통일성을 더욱 향상 시킬 수 있다!

< 추상 메서드 정의 기본 문법 >
[접근 제한자]  abstract 리턴타입 메서드명([매개변수...]);

- 추상클래스를 상속받은 서브클래스는 추상클래스에 추상메서드가 존재할 경우
  반드시 오버라이딩을 통해 구현부(바디{})를 정의해야한다!
- 상속된 메서드의 바디를 구현한다는 의미가 강하므로 오버라이딩 대신 임플리먼트로 표현.
- 서브클래스의 메서드 선언부를 강제하는 용도로 추상메서드를 사용
