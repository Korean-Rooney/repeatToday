super 키워드
- 슈퍼클래스의 멤버(멤버변수 및 메서드)에 대한 오버리이딩시 해당 멤버에 대한 은닉



1. 레퍼런스 super
- 레퍼런스 this와 마찬가지로 인스턴스의 주소를 저장하는 참조변수
- 레퍼런스 this는 자신의 인스턴스 주소를 저장하는 반면, 레퍼런스 super는 부모의 인스턴스 주소를 
  저장함
- 메서드 또는 변수 오버라이딩으로 인해 수퍼클래스의 멤버가 은닉되었을 때
  서브클래스에서 슈퍼클래스의 은닉된 멤버에 접근하기 위해 사용
- super 키워드를 중첩해서 사용 불가(= super.super 형식 등으로 사용 불가)

< 기본 사용 문법 >
서브클래스의 메서드에서
super.부모의 멤버변수 또는 super.부모의 메서드()
(this.자신의 멤버변수 또는 this.자신의 메서드()) = this와 사용 방법이 같다


2. 생성자 super
- 서브클래스의 생성자 내에서 슈퍼클래스의 생성자를 명시적으로 호출하는 코드
- 서브클래스의 생성자 내에서 super() 코드가 생략되어 있을 경우
  컴파일러에 의해 슈퍼클래스의 기본 생성자를 호출하는 super() 코드가 자동으로 추가됨
- 주로 슈퍼클래스의 기본 생성자가 없는 샅애에서 파라미터 생성자만 정의 할 경우
  서브 클래스 생성자에서 슈퍼클래스 기본 생성자가 호출되면 오류가 발생하므로
  이 때, 슈퍼클래스의 파라미터 생성자를 명시적으로 호출하는 용도로 사용
  또는, 슈퍼클래스의 생성자에서 초기화하는 코드와 서브클래스 생성자에서 초기화하는 코드가
  중복될 경우 중복 제거를 위해 슈퍼클래스의 생성자에서 슈퍼클래스의 멤버는 대신 초기화 하도록
  하는 용도로 사용
 - 생성자 this()와 마찬가지로 생성자 내에서 반드시 첫번쨰로 실행되어야 함
  => 따라서, 생성자 this()와 생성자 super()는 하나의 생성자에서 함께 기술 불가!
       만약, 오버로딩 된 생성자 호출 this()와 슈퍼클래스 생성자 호출 super()가
       함께 실행되어야 하는 경우 생성자 this()를 통해 자신의 다른 생성자를 호출 한 뒤
       호출된 생성자 내에서  생성자super()를 통해 슈퍼클래스에 접근하면 된다.

< 생성자 super()기본 문법 >
super(전달할데이터...);