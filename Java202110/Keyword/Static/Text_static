< 자바 프로그램의 실행 과정 >
0. 소크코드 작성 후 컴파일(번역) 후 클래스(번역 결과물) 실행
1. 클래스 로딩 = 클래스 내의 static 변수 및 메서드가 메모리에 로딩됨
     ex) main 메서드도 static 메서드이므로 함께 로딩됨
2. main() 메서드 호출(실행)
3. 인스턴스 생성(new) => 클래스 내의 인스턴스 변수 및 메서드가 메모리에 로딩됨
4. 메서드 호출(실행_ => 메서드 내의 로컬 변수가 메모리에 로딩됨
5. 결과 출력

< 인스턴스 멤버 >
- 클래스 내에서 선언 및 정의된 멤버변수 및 메서드
- static 키워드가 붙지 않은 멤버
- 반드시 인스턴스 생성 후에 접근 해야함(참조 변수를 통해 메모리에 접근 가능)
  ex) Student(클래스 타입) s(참조변수 선언) = new(인스턴스 생성) Student(인스턴스에 값 저장)

< static 멤버 >
- 클래스, 메서드, 변수의 제한자(= 지정자)로 사용
- 메서드 또는 변수에 static 키워드를 사용할 경우
  인스턴스 생성과 관계없이 클래스가 메모리에 로딩되는 시점에 해당 멤버가 함께 로딩 됨
  => 따라서, 참조변수 없이 클래스명만으로 해당 멤버에 접근 가능

< static 멤버 접근 기본 >
클래스명.멤버변수 or 클래스명.메서드명() 형태로 접근

 ============================================================

1.  static 변수( 정적 변수 = 클래스 변수 )
- 인스턴스 생성 전, 클래스가 메모리에 로딩될 때 static 변수도 함께 메모리에 로딩됨
  (= 인스턴스 생성 없이도 메모리에 해당 변수가 생성됨)
   => 따라서 참조변수(인스턴스 생성) 없이도 클래스명만으로 해당 변수에 접근 가능

- 모든 인스턴스에서 하나의 메모리 공간(변수)를 공유함
  (= 클래스당 하나만 생성됨)
  

2. static 메서드 ( 정적 메서드)
- 메서드 선언 시, 리턴타입 앞에 static 키워드를 붙여서 정의하는 메서드
- 클래스가 메모리에 로딩될 떄 static 변수와 함께 메모리에 로딩되므로
  인스턴스 생성과 무관하며, 클래스 명만으로 호출 가능함
  => 클래스명.메서드명() 형태로 호출


< static 메서드 정의 시 주의사항 >
- 인스턴스 생성 시점에서 사용되는 멤버들은 static 메서드 내에서 접근 불가
=> static 멤버가 로딩되는 시점은 인스턴스 생성 전이기 때문이다

1.  인스턴스 변수 사용 불가
 => 원인 : static 메서드가 로딩되는 시점은 클래스가 로딩되는 시점이며 인스턴스 변수는 
      인스턴스 생섬 시점에 메모리에 로딩되므로 static 메서드가 로딩되는 시점에는 존재하지 않는 변수

2. 레퍼런스 this또는 레퍼런스 super 사용 불가
=> 원인 : 레퍼런스 this는 자신의 인스턴스 주소를 저장하는 참조변수이나 static 메서드가 로딩되는
      시점에서는 인스턴스가 생성되지 않았으므로 레퍼런스 this 또는 사용 불가능한 참조 변수이다





