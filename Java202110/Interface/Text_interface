인터페이스(Interface)


- 물리적으로는 클래스와 동일하나 문법적으로는 다른 구조를 갖는 형태
- 클래스와 달리 선언시 class 키워드 대신 interface 키워드 사용
- 인터페이스는 상수와 추상메서드만 가질수 있다
  => 모든 멤버변수는 public static final이 붙은 상수로 취급됨(생략해도 동일)
       (final로 인해 값 변경 불가, static으로 인해 클래스명만으로 접근 가능하며,
         public으로 인해 누구나 접근 가능)
  => 모든 메서드는 public abstract가 붙은 추상메서드로 취금됨(생략해도 동일)
       (abstract로 인해 메서드 바디를 가질 수 없으며, public으로 인해 누구나 접근 가능)
- 추상 클래스와 마찬가지로 객체 생성이 불가능(추상 메서드 때문)
  => 단, 참조변수 타입으로는 사용 가능 = 업캐스팅을 통한 다형성 활용 가능
- 추상메서드 구현(오버라이딩)을 강제하고, 변수를 상수로만 강제하여 코드의 통일성 향상
  = 클래스와 유사하나 추상클래스보다 더 강력한 강제성을 부여하는 것이 목적
      ( 모든 메서드는 추상메서드, 모든 멤버변수는 상수로 강제함)


< 인터페이스 문법 >
interface interface1 {}

class Subclss implements interface1 {}

- 인터페이스는 class 키워드 대신 interface 키워드 사용
- 인터페이스 추상클래스와 마찬가지로 인스턴스 생성 불가
- 인터페이스는 확장의 개념이 아닌 구현의 개념이기 때문에 클래스를 상속하기 위해서
  extends 키워드가 아닌 implements 키워드를 사용하여 상속

- 인터페이스는 생성자를 가질 수 없다.
