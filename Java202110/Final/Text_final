final 키워드 (final 제한자)


- 클래스, 메서드, 멤버변수에 지정 가능한 키워드
- 해당 대상이 더 이상 수정될 수 없음을 의미함(= 변경의 마지막)

1. 멤버변수 final 사용시
- 변수값 변경이 금지(불가) = 상수로 취급됨
  => 즉, 기존에 저장된 값을 사용하는 것만 가능하고, 값을 변경할 수는 없다
- 반드시 초기값을 가져야 하며, 초기값을 지정하지 않을 경우
  blank final 상수로 취급되어 생성자를 통해 초기화가 필수!
- final로 선언된 변수(= 상수)는 일반 변수와 구별하기 위해 대문자로 작성
  단어 사이의 구분은 언더스코어(_) 기호 사용

< 기본 문법 >
final 데이터타입 변수명;

- 자바에서 제공되는 클래스(API)에는 상수들이 많이 활용됨( static final)
  => 해당 데이터를 보호하기 위해 상수로 선언함

=========================================================
2. 메서드에서 final 사용시
- 메서드 변경 불가 = 메서드 오버라이딩 금지
  => 즉, 슈퍼클래스의 메서드를 상속받아 사용하는 것은 가능하나
       오버라이딩을 통해 슈퍼클래스의 메서드를 변경(수정) 할 수는 없다.
- 슈퍼클래스가 제공하는 메서드를 그대로 사용하도록 강제하기 위해 사용

< 기본 문법 >
[접근제한자] final 리턴타입 메서드명 ([매개변수...]) {}

=========================================================
3. 클래스에 final 사용시
- 클래스 변경 불가 = 상속 금지
  => 즉, 특정 클래스 자체(포함 관계 등으로)를 그대로 사용하는 것은 가능하나
       다른 클래스에서 해당 클래스를 상속받을 수는 없다!
- 어떤 클래스 자체로 이미 완전한 기능을 수행하는 경우 상속을 금지시킴
  ex)String 클래스, Math 클래스 등 상속 금지
- final 메서드보다 더 광범위한 제한(메서드 전체 오버라이딩 불가)을 둘 때 사용!

< 기본 문법 >
[접근제한자] final 클래스명 {}

========================================================

black final 상수


- 클래스 내에서 멤버변수 선언시 final 키워드를 사용하여 변수(상수)를 선언할 때
  별도로 초기화하지 않은 final 상수를 blank final 상수라고 함
- blank final 상수는 주로 객체마다 다른 값으로 초기화 해야하는 상수에 적용
- 반드시 생성자를 통해 초기화 작업이 수행되어야함


=======================================================

static final 상수


- static과 final 키워드를 모두 사용하여 선언한 변수
- 클래스 로딩시 함께 로딩되고 모든 인스턴스가 하나의 변수를 공유하며,
  클래스명 만으로 변수에 접근 가능 ( static 특징)
- 값 변경 불가능 ( final 특징 )
- 진정한 의미의 상수(Constant) 를 뜻함
- 일반적으로 상수 선언 시 접근제한자는 public 사용 (= 누구나 접근 가능)
- 변수를 상수로 선언할 때 일반 변수와 구분하기 위해 이름을 모두 대문자로 작성
  (단어의 구분을 위해 언더스코어(_) 사용)
- static과 final 키워드의 순서는 무관하나, 보통 static을 먼저 표기

